{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_498876e7",
        "filename": "apps/skyring/monitoring.go",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1006318
      },
      "writtenOn": "2016-01-29T21:43:34Z",
      "side": 1,
      "message": "Line number 85 already starts 1 goroutine for each cluster.\n\n+\n\nAs and when clusters are created, we should invoke this ScheduleCluter as a goroutine.(Here bcoz as soon as cluster is created we might choose to schedule the cluster along side disk syncing and optional physical resource monitoring configuration)\n\nSo I think it might not be required here to start as a go-routine.",
      "revId": "669477ff939379327ef37e6b2c9bffd457e4610d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_a44cb771",
        "filename": "apps/skyring/monitoring.go",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2016-01-30T03:39:36Z",
      "side": 1,
      "message": "The function ScheduleCluster() is invoked from inside the task of CreateCluster from cluster.go.\n\nHere if we dont run scheduler.Schedule() as a go routine it used to keep running even if the cluster is created and thus lock held by POST_Clusters is never released.\n\nThis way cluster gets created but after that no operation like create storage etc succeed as the lock is held by POST_Clusters function.\n\nThis was a major issue post action of create cluster.",
      "parentUuid": "fa81d914_498876e7",
      "revId": "669477ff939379327ef37e6b2c9bffd457e4610d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}