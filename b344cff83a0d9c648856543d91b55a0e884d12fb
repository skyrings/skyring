{
  "comments": [
    {
      "key": {
        "uuid": "9ab29df4_45b7a886",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Any cluster entity in skyring are managed ie a cluster is enable/disable management, expand/forget etc.  An unmanaged cluster means skyring has no control on the cluster, such cluster can be added/imported.\n\nI feel manage/unmanage is quite confusing.",
      "range": {
        "startLine": 13,
        "startChar": 16,
        "endLine": 13,
        "endChar": 20
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_68bac1df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "First I had manage/unmanage and based on your comment it was changed to enabl-disable.\n\nNishant is of strong feeling to have manage/unmanage as most of the other products have like that. So changed it back.\n\nLet us first close on that and then I would modify this.",
      "parentUuid": "9ab29df4_45b7a886",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_65bcac6a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Its not very clear whether mon is an optional entity.  It would be clear if input is like below\n\n{\"node_id\": ID,\n # node_type is provider specific value which has to be there even if its not applicable for the given cluster eg. no node_type in gluster cluster\n \"node_type\": \"TYPE\",\n \"devices\": [{\"name\": \"vdb\", \"fs_type\": \"xfs\", \"options\": {}}, ...]\n  \"options\": {\"provider\": \"specific\", \"key\": \"value\", ...}}",
      "range": {
        "startLine": 18,
        "startChar": 32,
        "endLine": 18,
        "endChar": 39
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_c8c82d77",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "I keep mon\u003dY under options because this information is provider specific and is not at all read inside skyring code. The request body is sent as is to the provider and provider knows what to expect here and performs the work accordingly.\n\nRegarding devices, all other details like fs_type etc we already have handly in skyring. why ask user to pass the details again?\n\nOptions can be added to pass provider specific key-val pair for expansion. Will add this.",
      "parentUuid": "9ab29df4_65bcac6a",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_792531c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-31T04:31:49Z",
      "side": 1,
      "message": "1. Why mon is optional? How radosgw will be added?  How a node with multiple types ie it can be mon+radosgw+something-else will handled?\n\n2. How does an admin change different filesystem for different type of nodes eg. mon would run better with ext4 whereas osd would run better in xfs with inode-size\u003d1024 and a community user prefer to use btrfs? How mount options of different fstype is selected?",
      "parentUuid": "9ab29df4_c8c82d77",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_dfc1bd2f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-11-02T06:27:18Z",
      "side": 1,
      "message": "1. The same API wuould be used for gluster and other providers as well. In that case why mon has to be provided by the user? All that is needed specific to gluster would be provided under \"options\" and that would be tackled by individual provider and not at all looked at in skyring code.\n2. I think I get your point for disks. Will change to pass name, fstype and options",
      "parentUuid": "9ab29df4_792531c1",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_456ec802",
        "filename": "backend/backend.go",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "You should avoid salt specific things here.  I am not favor of having a new argument here.  AcceptNode() should work with ignore list by default.  If this is confusing, I would prefer \u0027ignored\u0027 than \u0027include_rejected\u0027.",
      "range": {
        "startLine": 52,
        "startChar": 45,
        "endLine": 52,
        "endChar": 61
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_08906542",
        "filename": "backend/backend.go",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Would change it to ignored",
      "parentUuid": "9ab29df4_456ec802",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_a57404d0",
        "filename": "backend/backend.go",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "it would be good to work with one service at a time.  Otherwise its very difficult to have clear return value ie (bool, error) is not enough.",
      "range": {
        "startLine": 60,
        "startChar": 20,
        "endLine": 60,
        "endChar": 21
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_28952933",
        "filename": "backend/backend.go",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "local.cmd accepts a list of services so changed it so. But if you insist, will change it as told.",
      "parentUuid": "9ab29df4_a57404d0",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_c581f890",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Please remove these unused functions.",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 10
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_e8c5f15b",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab29df4_c581f890",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_a55b2453",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "0. just use \u0027accepted \u003d master.call_func(\"key.accept\", match\u003dnode, include_rejected\u003dinclude_rejected). No \u0027if\u0027 block required\n\n1. If possible, please use salt.key.Key class",
      "range": {
        "startLine": 92,
        "startChar": 18,
        "endLine": 92,
        "endChar": 19
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_28a7e9be",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "salt.key.reject does not take include_accepted as parameter. It just takes match only. So was forced to use if-else.\nMay be in else case as well we can use master.call_func :))",
      "parentUuid": "9ab29df4_a55b2453",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_790c5143",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-31T04:31:49Z",
      "side": 1,
      "message": "I can\u0027t understand.  Why do we worry about salt.key.reject in key.accept?  Why isn\u0027t \u0027accepted \u003d master.call_func(\"key.accept\", match\u003dnode, include_rejected\u003dinclude_rejected)\u0027 working?",
      "parentUuid": "9ab29df4_28a7e9be",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_1fe335da",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-11-02T06:27:18Z",
      "side": 1,
      "message": "Sorry, my bad in last comment.\nThe accept method in salt.wheel.key is as below \n\ndef accept(match):\n    \u0027\u0027\u0027\n    Accept keys based on a glob match\n    \u0027\u0027\u0027\n    skey \u003d salt.key.Key(__opts__)\n    return skey.accept(match)\n\nSo we cannot pass include_rejected here. I would have to invoke salt.key.Key.accept() functions which looks as below\n\ndef accept(self, match\u003dNone, match_dict\u003dNone, include_rejected\u003dFalse):",
      "parentUuid": "9ab29df4_790c5143",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_054bf087",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "\"service\" is better than \"srvcs\"",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 31
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_48ac1da1",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 256,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab29df4_054bf087",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_2550f431",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 259,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "\"DisableService\" is more appropriate as it works for only one service.",
      "range": {
        "startLine": 259,
        "startChar": 30,
        "endLine": 259,
        "endChar": 31
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_68b1e1f7",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 259,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "It works for list of services. Here srvcs is list of strings .",
      "parentUuid": "9ab29df4_2550f431",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_99092534",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 259,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-31T04:31:49Z",
      "side": 1,
      "message": "Unforunately I am not able to find service module working with list of services.  Are you referring other than https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.service.html?",
      "parentUuid": "9ab29df4_68b1e1f7",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_3fe8f9b3",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 259,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-11-02T06:27:18Z",
      "side": 1,
      "message": "Ok. will change to accept one service as a time",
      "parentUuid": "9ab29df4_99092534",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_4545e86e",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 267,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "same as above",
      "range": {
        "startLine": 267,
        "startChar": 0,
        "endLine": 267,
        "endChar": 53
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_5fedadc2",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 267,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-11-02T06:27:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab29df4_4545e86e",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_c5581859",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Run pep8 and pyflakes",
      "range": {
        "startLine": 269,
        "startChar": 4,
        "endLine": 269,
        "endChar": 10
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_88955542",
        "filename": "backend/salt/python/skyring/saltwrapper.py",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Done.\nWe should enable pep8 and pyflakes for make as well.",
      "parentUuid": "9ab29df4_c5581859",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_65410c5a",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "It would be clear to read if we have json element \u0027management_ip4\u0027 than \u0027managementip4\u0027.  If you agree, you could fix wherever its applicable",
      "range": {
        "startLine": 24,
        "startChar": 41,
        "endLine": 24,
        "endChar": 54
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_e89c116c",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "The provider spec has got all the names without underscore so kept inline with the same.",
      "parentUuid": "9ab29df4_65410c5a",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_b906e91e",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-31T04:31:49Z",
      "side": 1,
      "message": "If so, provider spec would lead to unreadable structure.  I would prefer the provider spec has to be fixed first.",
      "parentUuid": "9ab29df4_e89c116c",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_7fd191fa",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-11-02T06:27:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab29df4_b906e91e",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_852540c4",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "too long",
      "range": {
        "startLine": 61,
        "startChar": 39,
        "endLine": 61,
        "endChar": 61
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_288e092f",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "StorageSWVersion ??",
      "parentUuid": "9ab29df4_852540c4",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_05193088",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "too long",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 24
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_48833d04",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "MemPageShareStatus??",
      "parentUuid": "9ab29df4_05193088",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_251e3471",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Why not just ID",
      "range": {
        "startLine": 79,
        "startChar": 1,
        "endLine": 79,
        "endChar": 10
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_887c7522",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Mongo Db tables already have a field \"_id\" so to make it diff. And also inline with provider spec :)",
      "parentUuid": "9ab29df4_251e3471",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_45132866",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Just Name",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_a8793931",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Inline with provider spec :)",
      "parentUuid": "9ab29df4_45132866",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_65182c82",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "CompatVer or CompatVersion is better",
      "range": {
        "startLine": 81,
        "startChar": 1,
        "endLine": 81,
        "endChar": 21
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_c8766d3e",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab29df4_65182c82",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_850c6044",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "Type is good",
      "range": {
        "startLine": 82,
        "startChar": 1,
        "endLine": 82,
        "endChar": 12
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_9fce6559",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-11-02T06:27:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab29df4_850c6044",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_c5065820",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1006046
      },
      "writtenOn": "2015-10-30T05:31:33Z",
      "side": 1,
      "message": "In short, its not good idea to repeat struct name eg \n\ntype User struct {Username string}\n\ncould be changed\n\ntype User struct {Name string}",
      "range": {
        "startLine": 89,
        "startChar": 1,
        "endLine": 89,
        "endChar": 8
      },
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_e873314b",
        "filename": "models/core_models.go",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1006049
      },
      "writtenOn": "2015-10-30T09:22:23Z",
      "side": 1,
      "message": "Kept the names inline with provider spec. We need to change all the way everywhere.",
      "parentUuid": "9ab29df4_c5065820",
      "revId": "b344cff83a0d9c648856543d91b55a0e884d12fb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}